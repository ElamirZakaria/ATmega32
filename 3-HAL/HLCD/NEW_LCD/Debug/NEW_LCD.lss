
NEW_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001efc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00001efc  00001f70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000174c  00000000  00000000  00001fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bcc  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000061e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000070cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008269  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <main>
      7a:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e9       	ldi	r26, 0x90	; 144
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e9       	ldi	r24, 0x90	; 144
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <HLCD_stderrSendCommand>:




static STD_error_t HLCD_stderrSendCommand(u8 ARG_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	60 97       	sbiw	r28, 0x10	; 16
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	88 8b       	std	Y+16, r24	; 0x10
	STD_error_t L_stderrStatus = E_OK ;
     b4c:	1f 86       	std	Y+15, r1	; 0x0f
	/*Rs Pin is set low to send a command*/
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_RS_PIN,MDIO_PIN_LOW);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MDIO_stderrSetPinValue>
     b58:	8f 87       	std	Y+15, r24	; 0x0f
	/*Rw pin is set low to write on LCD*/
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_RW_PIN,MDIO_PIN_LOW);
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MDIO_stderrSetPinValue>
     b64:	8f 87       	std	Y+15, r24	; 0x0f
#if HLCD_BIT_MODE == HLCD_8_BIT_MODE


	/*Put the command on the Data pins*/
	L_stderrStatus=MDIO_stderrSetPortValue(HLCD_DATA_PORT,ARG_u8Command);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	68 89       	ldd	r22, Y+16	; 0x10
     b6a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <MDIO_stderrSetPortValue>
     b6e:	8f 87       	std	Y+15, r24	; 0x0f
	/*Send a pulse on the Enable pin*/
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_E_PIN,MDIO_PIN_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MDIO_stderrSetPinValue>
     b7a:	8f 87       	std	Y+15, r24	; 0x0f
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	b0 e4       	ldi	r27, 0x40	; 64
     b84:	8b 87       	std	Y+11, r24	; 0x0b
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	ad 87       	std	Y+13, r26	; 0x0d
     b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b90:	8d 85       	ldd	r24, Y+13	; 0x0d
     b92:	9e 85       	ldd	r25, Y+14	; 0x0e
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4a ef       	ldi	r20, 0xFA	; 250
     b9a:	54 e4       	ldi	r21, 0x44	; 68
     b9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	8f 83       	std	Y+7, r24	; 0x07
     ba6:	98 87       	std	Y+8, r25	; 0x08
     ba8:	a9 87       	std	Y+9, r26	; 0x09
     baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bac:	6f 81       	ldd	r22, Y+7	; 0x07
     bae:	78 85       	ldd	r23, Y+8	; 0x08
     bb0:	89 85       	ldd	r24, Y+9	; 0x09
     bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bc0:	88 23       	and	r24, r24
     bc2:	2c f4       	brge	.+10     	; 0xbce <HLCD_stderrSendCommand+0x98>
		__ticks = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9e 83       	std	Y+6, r25	; 0x06
     bca:	8d 83       	std	Y+5, r24	; 0x05
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <HLCD_stderrSendCommand+0x116>
	else if (__tmp > 65535)
     bce:	6f 81       	ldd	r22, Y+7	; 0x07
     bd0:	78 85       	ldd	r23, Y+8	; 0x08
     bd2:	89 85       	ldd	r24, Y+9	; 0x09
     bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	4c f5       	brge	.+82     	; 0xc38 <HLCD_stderrSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	6b 85       	ldd	r22, Y+11	; 0x0b
     be8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bea:	8d 85       	ldd	r24, Y+13	; 0x0d
     bec:	9e 85       	ldd	r25, Y+14	; 0x0e
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	bc 01       	movw	r22, r24
     c00:	cd 01       	movw	r24, r26
     c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <HLCD_stderrSendCommand+0xf8>
     c10:	88 ec       	ldi	r24, 0xC8	; 200
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <HLCD_stderrSendCommand+0xe6>
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	69 f7       	brne	.-38     	; 0xc10 <HLCD_stderrSendCommand+0xda>
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <HLCD_stderrSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c38:	6f 81       	ldd	r22, Y+7	; 0x07
     c3a:	78 85       	ldd	r23, Y+8	; 0x08
     c3c:	89 85       	ldd	r24, Y+9	; 0x09
     c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9e 83       	std	Y+6, r25	; 0x06
     c4a:	8d 83       	std	Y+5, r24	; 0x05
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <HLCD_stderrSendCommand+0x122>
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_E_PIN,MDIO_PIN_LOW);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	62 e0       	ldi	r22, 0x02	; 2
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MDIO_stderrSetPinValue>
     c6a:	8f 87       	std	Y+15, r24	; 0x0f
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_E_PIN,MDIO_PIN_HIGH);
	_delay_ms(2);
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_E_PIN,MDIO_PIN_LOW);
#endif

	return L_stderrStatus;
     c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     c6e:	60 96       	adiw	r28, 0x10	; 16
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <HLCD_stderrSendData>:
static STD_error_t HLCD_stderrSendData(u8 ARG_u8Data)
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	60 97       	sbiw	r28, 0x10	; 16
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	88 8b       	std	Y+16, r24	; 0x10
	STD_error_t L_stderrStatus = E_OK ;
     c96:	1f 86       	std	Y+15, r1	; 0x0f
#if HLCD_BIT_MODE == HLCD_8_BIT_MODE

	/*Rs Pin is set high to send data*/
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_RS_PIN,MDIO_PIN_HIGH);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MDIO_stderrSetPinValue>
     ca2:	8f 87       	std	Y+15, r24	; 0x0f
	/*Rw pin is set low to write on LCD*/
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_RW_PIN,MDIO_PIN_LOW);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MDIO_stderrSetPinValue>
     cae:	8f 87       	std	Y+15, r24	; 0x0f
	/*Put the command on the Data pins*/
	L_stderrStatus=MDIO_stderrSetPortValue(HLCD_DATA_PORT,ARG_u8Data);
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	68 89       	ldd	r22, Y+16	; 0x10
     cb4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <MDIO_stderrSetPortValue>
     cb8:	8f 87       	std	Y+15, r24	; 0x0f
	/*Send a pulse on the Enable pin*/
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_E_PIN,MDIO_PIN_HIGH);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	62 e0       	ldi	r22, 0x02	; 2
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MDIO_stderrSetPinValue>
     cc4:	8f 87       	std	Y+15, r24	; 0x0f
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e4       	ldi	r27, 0x40	; 64
     cce:	8b 87       	std	Y+11, r24	; 0x0b
     cd0:	9c 87       	std	Y+12, r25	; 0x0c
     cd2:	ad 87       	std	Y+13, r26	; 0x0d
     cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     cda:	8d 85       	ldd	r24, Y+13	; 0x0d
     cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	4a ef       	ldi	r20, 0xFA	; 250
     ce4:	54 e4       	ldi	r21, 0x44	; 68
     ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	8f 83       	std	Y+7, r24	; 0x07
     cf0:	98 87       	std	Y+8, r25	; 0x08
     cf2:	a9 87       	std	Y+9, r26	; 0x09
     cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf6:	6f 81       	ldd	r22, Y+7	; 0x07
     cf8:	78 85       	ldd	r23, Y+8	; 0x08
     cfa:	89 85       	ldd	r24, Y+9	; 0x09
     cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e8       	ldi	r20, 0x80	; 128
     d04:	5f e3       	ldi	r21, 0x3F	; 63
     d06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d0a:	88 23       	and	r24, r24
     d0c:	2c f4       	brge	.+10     	; 0xd18 <HLCD_stderrSendData+0x98>
		__ticks = 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	8d 83       	std	Y+5, r24	; 0x05
     d16:	3f c0       	rjmp	.+126    	; 0xd96 <HLCD_stderrSendData+0x116>
	else if (__tmp > 65535)
     d18:	6f 81       	ldd	r22, Y+7	; 0x07
     d1a:	78 85       	ldd	r23, Y+8	; 0x08
     d1c:	89 85       	ldd	r24, Y+9	; 0x09
     d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	3f ef       	ldi	r19, 0xFF	; 255
     d24:	4f e7       	ldi	r20, 0x7F	; 127
     d26:	57 e4       	ldi	r21, 0x47	; 71
     d28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d2c:	18 16       	cp	r1, r24
     d2e:	4c f5       	brge	.+82     	; 0xd82 <HLCD_stderrSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d30:	6b 85       	ldd	r22, Y+11	; 0x0b
     d32:	7c 85       	ldd	r23, Y+12	; 0x0c
     d34:	8d 85       	ldd	r24, Y+13	; 0x0d
     d36:	9e 85       	ldd	r25, Y+14	; 0x0e
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e2       	ldi	r20, 0x20	; 32
     d3e:	51 e4       	ldi	r21, 0x41	; 65
     d40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	9e 83       	std	Y+6, r25	; 0x06
     d56:	8d 83       	std	Y+5, r24	; 0x05
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <HLCD_stderrSendData+0xf8>
     d5a:	88 ec       	ldi	r24, 0xC8	; 200
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <HLCD_stderrSendData+0xe6>
     d6a:	9c 83       	std	Y+4, r25	; 0x04
     d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	9e 81       	ldd	r25, Y+6	; 0x06
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	9e 83       	std	Y+6, r25	; 0x06
     d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	9e 81       	ldd	r25, Y+6	; 0x06
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	69 f7       	brne	.-38     	; 0xd5a <HLCD_stderrSendData+0xda>
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <HLCD_stderrSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d82:	6f 81       	ldd	r22, Y+7	; 0x07
     d84:	78 85       	ldd	r23, Y+8	; 0x08
     d86:	89 85       	ldd	r24, Y+9	; 0x09
     d88:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	9e 83       	std	Y+6, r25	; 0x06
     d94:	8d 83       	std	Y+5, r24	; 0x05
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <HLCD_stderrSendData+0x122>
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_E_PIN,MDIO_PIN_LOW);
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	62 e0       	ldi	r22, 0x02	; 2
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MDIO_stderrSetPinValue>
     db4:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_stderrSetPinValue(HLCD_DATA_PORT, HLCD_D7_PIN, GET_BIT(ARG_u8Data,7));
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_E_PIN,MDIO_PIN_HIGH);
	_delay_ms(2);
	L_stderrStatus=MDIO_stderrSetPinValue(HLCD_E_PIN,MDIO_PIN_LOW);
#endif
	return L_stderrStatus;
     db6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     db8:	60 96       	adiw	r28, 0x10	; 16
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <HLCD_voidInit>:
void HLCD_voidInit(void)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	2e 97       	sbiw	r28, 0x0e	; 14
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
	MDIO_stderrSetPinDirection(HLCD_RS_PIN,MDIO_PIN_OUTPUT);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	41 e0       	ldi	r20, 0x01	; 1
     de4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(HLCD_RW_PIN,MDIO_PIN_OUTPUT);
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	41 e0       	ldi	r20, 0x01	; 1
     dee:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(HLCD_E_PIN,MDIO_PIN_OUTPUT);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	62 e0       	ldi	r22, 0x02	; 2
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <MDIO_stderrSetPinDirection>

#if HLCD_BIT_MODE == HLCD_8_BIT_MODE
	MDIO_stderrSetPortDirection(HLCD_DATA_PORT,MDIO_PORT_HIGH);
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	6f ef       	ldi	r22, 0xFF	; 255
     e00:	0e 94 ac 09 	call	0x1358	; 0x1358 <MDIO_stderrSetPortDirection>
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	a0 e2       	ldi	r26, 0x20	; 32
     e0a:	b2 e4       	ldi	r27, 0x42	; 66
     e0c:	8b 87       	std	Y+11, r24	; 0x0b
     e0e:	9c 87       	std	Y+12, r25	; 0x0c
     e10:	ad 87       	std	Y+13, r26	; 0x0d
     e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e14:	6b 85       	ldd	r22, Y+11	; 0x0b
     e16:	7c 85       	ldd	r23, Y+12	; 0x0c
     e18:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	4a ef       	ldi	r20, 0xFA	; 250
     e22:	54 e4       	ldi	r21, 0x44	; 68
     e24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	8f 83       	std	Y+7, r24	; 0x07
     e2e:	98 87       	std	Y+8, r25	; 0x08
     e30:	a9 87       	std	Y+9, r26	; 0x09
     e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e34:	6f 81       	ldd	r22, Y+7	; 0x07
     e36:	78 85       	ldd	r23, Y+8	; 0x08
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e8       	ldi	r20, 0x80	; 128
     e42:	5f e3       	ldi	r21, 0x3F	; 63
     e44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e48:	88 23       	and	r24, r24
     e4a:	2c f4       	brge	.+10     	; 0xe56 <HLCD_voidInit+0x8c>
		__ticks = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <HLCD_voidInit+0x10a>
	else if (__tmp > 65535)
     e56:	6f 81       	ldd	r22, Y+7	; 0x07
     e58:	78 85       	ldd	r23, Y+8	; 0x08
     e5a:	89 85       	ldd	r24, Y+9	; 0x09
     e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	3f ef       	ldi	r19, 0xFF	; 255
     e62:	4f e7       	ldi	r20, 0x7F	; 127
     e64:	57 e4       	ldi	r21, 0x47	; 71
     e66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e6a:	18 16       	cp	r1, r24
     e6c:	4c f5       	brge	.+82     	; 0xec0 <HLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e70:	7c 85       	ldd	r23, Y+12	; 0x0c
     e72:	8d 85       	ldd	r24, Y+13	; 0x0d
     e74:	9e 85       	ldd	r25, Y+14	; 0x0e
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e2       	ldi	r20, 0x20	; 32
     e7c:	51 e4       	ldi	r21, 0x41	; 65
     e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	0f c0       	rjmp	.+30     	; 0xeb6 <HLCD_voidInit+0xec>
     e98:	88 ec       	ldi	r24, 0xC8	; 200
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <HLCD_voidInit+0xda>
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	69 f7       	brne	.-38     	; 0xe98 <HLCD_voidInit+0xce>
     ebe:	14 c0       	rjmp	.+40     	; 0xee8 <HLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec0:	6f 81       	ldd	r22, Y+7	; 0x07
     ec2:	78 85       	ldd	r23, Y+8	; 0x08
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <HLCD_voidInit+0x116>
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	MDIO_stderrSetPinDirection(HLCD_DATA_PORT, HLCD_D6_PIN, MDIO_PIN_OUTPUT);
	MDIO_stderrSetPinDirection(HLCD_DATA_PORT, HLCD_D7_PIN, MDIO_PIN_OUTPUT);
#endif
	/*Wait for around 30ms*/
	_delay_ms(40);
	HLCD_stderrSendCommand(HLCD_FUNCTION_SET);
     ee8:	88 e3       	ldi	r24, 0x38	; 56
     eea:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_stderrSendCommand>
	/*The delay is handled in the enable pulse */
	HLCD_stderrSendCommand(HLCD_DISPLAY_ON);
     eee:	8c e0       	ldi	r24, 0x0C	; 12
     ef0:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_stderrSendCommand>
	HLCD_voidClearDisplay();
     ef4:	0e 94 85 07 	call	0xf0a	; 0xf0a <HLCD_voidClearDisplay>

}
     ef8:	2e 96       	adiw	r28, 0x0e	; 14
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <HLCD_voidClearDisplay>:
void HLCD_voidClearDisplay(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	HLCD_stderrSendCommand(HLCD_CLEAR_DISPLAY);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_stderrSendCommand>

}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <HLCD_voidDisplayString>:
void HLCD_voidDisplayString(const char * ccharpString)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	a0 97       	sbiw	r28, 0x20	; 32
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	98 a3       	std	Y+32, r25	; 0x20
     f34:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 L_u8CounterOfString = 0 ,flag =0;
     f36:	1e 8e       	std	Y+30, r1	; 0x1e
     f38:	1d 8e       	std	Y+29, r1	; 0x1d
	if(ccharpString != NULL_POINTER)
     f3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f3c:	98 a1       	ldd	r25, Y+32	; 0x20
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	09 f4       	brne	.+2      	; 0xf44 <HLCD_voidDisplayString+0x26>
     f42:	1e c1       	rjmp	.+572    	; 0x1180 <HLCD_voidDisplayString+0x262>
	{
		do
		{
			if((L_u8CounterOfString-1)%15==0)
     f44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	2f e0       	ldi	r18, 0x0F	; 15
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	b9 01       	movw	r22, r18
     f52:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__divmodhi4>
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	09 f0       	breq	.+2      	; 0xf5c <HLCD_voidDisplayString+0x3e>
     f5a:	f8 c0       	rjmp	.+496    	; 0x114c <HLCD_voidDisplayString+0x22e>
			{
				if(L_u8CounterOfString ==1)
     f5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	09 f4       	brne	.+2      	; 0xf64 <HLCD_voidDisplayString+0x46>
     f62:	f4 c0       	rjmp	.+488    	; 0x114c <HLCD_voidDisplayString+0x22e>
				{
					/*Do nothing*/
				}


				else if(flag == 0)
     f64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f66:	88 23       	and	r24, r24
     f68:	09 f0       	breq	.+2      	; 0xf6c <HLCD_voidDisplayString+0x4e>
     f6a:	79 c0       	rjmp	.+242    	; 0x105e <HLCD_voidDisplayString+0x140>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	aa e7       	ldi	r26, 0x7A	; 122
     f72:	b4 e4       	ldi	r27, 0x44	; 68
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	4a ef       	ldi	r20, 0xFA	; 250
     f8a:	54 e4       	ldi	r21, 0x44	; 68
     f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <HLCD_voidDisplayString+0xa0>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <HLCD_voidDisplayString+0x11e>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <HLCD_voidDisplayString+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <HLCD_voidDisplayString+0x100>
    1000:	88 ec       	ldi	r24, 0xC8	; 200
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <HLCD_voidDisplayString+0xee>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <HLCD_voidDisplayString+0xe2>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <HLCD_voidDisplayString+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <HLCD_voidDisplayString+0x12a>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
				{
					_delay_ms(1000);
					HLCD_voidGoToXY(1,0);
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	0e 94 c9 08 	call	0x1192	; 0x1192 <HLCD_voidGoToXY>
					flag = 1 ;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	8d 8f       	std	Y+29, r24	; 0x1d
    105c:	77 c0       	rjmp	.+238    	; 0x114c <HLCD_voidDisplayString+0x22e>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	aa e7       	ldi	r26, 0x7A	; 122
    1064:	b4 e4       	ldi	r27, 0x44	; 68
    1066:	8b 87       	std	Y+11, r24	; 0x0b
    1068:	9c 87       	std	Y+12, r25	; 0x0c
    106a:	ad 87       	std	Y+13, r26	; 0x0d
    106c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1070:	7c 85       	ldd	r23, Y+12	; 0x0c
    1072:	8d 85       	ldd	r24, Y+13	; 0x0d
    1074:	9e 85       	ldd	r25, Y+14	; 0x0e
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4a ef       	ldi	r20, 0xFA	; 250
    107c:	54 e4       	ldi	r21, 0x44	; 68
    107e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	8f 83       	std	Y+7, r24	; 0x07
    1088:	98 87       	std	Y+8, r25	; 0x08
    108a:	a9 87       	std	Y+9, r26	; 0x09
    108c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    108e:	6f 81       	ldd	r22, Y+7	; 0x07
    1090:	78 85       	ldd	r23, Y+8	; 0x08
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	9a 85       	ldd	r25, Y+10	; 0x0a
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10a2:	88 23       	and	r24, r24
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <HLCD_voidDisplayString+0x192>
		__ticks = 1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	3f c0       	rjmp	.+126    	; 0x112e <HLCD_voidDisplayString+0x210>
	else if (__tmp > 65535)
    10b0:	6f 81       	ldd	r22, Y+7	; 0x07
    10b2:	78 85       	ldd	r23, Y+8	; 0x08
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	4f e7       	ldi	r20, 0x7F	; 127
    10be:	57 e4       	ldi	r21, 0x47	; 71
    10c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10c4:	18 16       	cp	r1, r24
    10c6:	4c f5       	brge	.+82     	; 0x111a <HLCD_voidDisplayString+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    10cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	9e 83       	std	Y+6, r25	; 0x06
    10ee:	8d 83       	std	Y+5, r24	; 0x05
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <HLCD_voidDisplayString+0x1f2>
    10f2:	88 ec       	ldi	r24, 0xC8	; 200
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9c 83       	std	Y+4, r25	; 0x04
    10f8:	8b 83       	std	Y+3, r24	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <HLCD_voidDisplayString+0x1e0>
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	69 f7       	brne	.-38     	; 0x10f2 <HLCD_voidDisplayString+0x1d4>
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <HLCD_voidDisplayString+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111a:	6f 81       	ldd	r22, Y+7	; 0x07
    111c:	78 85       	ldd	r23, Y+8	; 0x08
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <HLCD_voidDisplayString+0x21c>
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
				}
				else
				{
					_delay_ms(1000);
					HLCD_voidGoToXY(0,0);
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	0e 94 c9 08 	call	0x1192	; 0x1192 <HLCD_voidGoToXY>
					flag = 0 ;
    114a:	1d 8e       	std	Y+29, r1	; 0x1d
				}

			}

			HLCD_stderrSendData(ccharpString[L_u8CounterOfString]);
    114c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1154:	98 a1       	ldd	r25, Y+32	; 0x20
    1156:	fc 01       	movw	r30, r24
    1158:	e2 0f       	add	r30, r18
    115a:	f3 1f       	adc	r31, r19
    115c:	80 81       	ld	r24, Z
    115e:	0e 94 40 06 	call	0xc80	; 0xc80 <HLCD_stderrSendData>
			L_u8CounterOfString++;
    1162:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(ccharpString[L_u8CounterOfString] != '\0');
    1168:	8e 8d       	ldd	r24, Y+30	; 0x1e
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1170:	98 a1       	ldd	r25, Y+32	; 0x20
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	80 81       	ld	r24, Z
    117a:	88 23       	and	r24, r24
    117c:	09 f0       	breq	.+2      	; 0x1180 <HLCD_voidDisplayString+0x262>
    117e:	e2 ce       	rjmp	.-572    	; 0xf44 <HLCD_voidDisplayString+0x26>
	}
	else
	{
		/*Do nothing Misra*/
	}
}
    1180:	a0 96       	adiw	r28, 0x20	; 32
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <HLCD_voidGoToXY>:

void HLCD_voidGoToXY(u8 ARG_u8XPosition,u8 ARG_u8YPosition)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <HLCD_voidGoToXY+0x6>
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	8a 83       	std	Y+2, r24	; 0x02
    11a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8LocalAddress ;
	if(ARG_u8XPosition ==0)
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	88 23       	and	r24, r24
    11a6:	19 f4       	brne	.+6      	; 0x11ae <HLCD_voidGoToXY+0x1c>
	{
		L_u8LocalAddress = ARG_u8YPosition;
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <HLCD_voidGoToXY+0x28>
	}
	else if (ARG_u8XPosition == 1)
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	19 f4       	brne	.+6      	; 0x11ba <HLCD_voidGoToXY+0x28>
	{
		L_u8LocalAddress = ARG_u8YPosition + 0x40 ;
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	80 5c       	subi	r24, 0xC0	; 192
    11b8:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	L_u8LocalAddress|=0x80;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	80 68       	ori	r24, 0x80	; 128
    11be:	89 83       	std	Y+1, r24	; 0x01
	HLCD_stderrSendCommand(L_u8LocalAddress);
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_stderrSendCommand>
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <HLCD_voidWriteSpecialCharacter>:
void HLCD_voidWriteSpecialCharacter(u8 * ARG_pu8Pattern, u8 Copy_u8PatternNumber, u8 ARG_u8XPosition,u8 ARG_u8YPosition)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	27 97       	sbiw	r28, 0x07	; 7
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	9c 83       	std	Y+4, r25	; 0x04
    11e8:	8b 83       	std	Y+3, r24	; 0x03
    11ea:	6d 83       	std	Y+5, r22	; 0x05
    11ec:	4e 83       	std	Y+6, r20	; 0x06
    11ee:	2f 83       	std	Y+7, r18	; 0x07
	u8 L_u8CCGRAMAddress = 0, L_u8Iterator=0 ;
    11f0:	1a 82       	std	Y+2, r1	; 0x02
    11f2:	19 82       	std	Y+1, r1	; 0x01
	/*Calculate the CGRam address whose block is 8 bytes*/
	L_u8CCGRAMAddress = Copy_u8PatternNumber*8;
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	8a 83       	std	Y+2, r24	; 0x02
	HLCD_stderrSendCommand(L_u8CCGRAMAddress+64);
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 5c       	subi	r24, 0xC0	; 192
    120c:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_stderrSendCommand>
	/*Write the pattern into the ccgram*/
	for(L_u8Iterator=0;L_u8Iterator<8;L_u8Iterator++)
    1210:	19 82       	std	Y+1, r1	; 0x01
    1212:	0e c0       	rjmp	.+28     	; 0x1230 <HLCD_voidWriteSpecialCharacter+0x5e>
	{
		HLCD_stderrSendData(ARG_pu8Pattern[L_u8Iterator]);
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	fc 01       	movw	r30, r24
    1220:	e2 0f       	add	r30, r18
    1222:	f3 1f       	adc	r31, r19
    1224:	80 81       	ld	r24, Z
    1226:	0e 94 40 06 	call	0xc80	; 0xc80 <HLCD_stderrSendData>
	u8 L_u8CCGRAMAddress = 0, L_u8Iterator=0 ;
	/*Calculate the CGRam address whose block is 8 bytes*/
	L_u8CCGRAMAddress = Copy_u8PatternNumber*8;
	HLCD_stderrSendCommand(L_u8CCGRAMAddress+64);
	/*Write the pattern into the ccgram*/
	for(L_u8Iterator=0;L_u8Iterator<8;L_u8Iterator++)
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	78 f3       	brcs	.-34     	; 0x1214 <HLCD_voidWriteSpecialCharacter+0x42>
	{
		HLCD_stderrSendData(ARG_pu8Pattern[L_u8Iterator]);
	}
	/*Go back the the DDRAM to display the pattern*/
	HLCD_voidGoToXY(ARG_u8XPosition,ARG_u8YPosition);
    1236:	8e 81       	ldd	r24, Y+6	; 0x06
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	0e 94 c9 08 	call	0x1192	; 0x1192 <HLCD_voidGoToXY>
	/*Display the pattern written to in the CCGRAM*/
	HLCD_stderrSendData(Copy_u8PatternNumber);
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	0e 94 40 06 	call	0xc80	; 0xc80 <HLCD_stderrSendData>
}
    1244:	27 96       	adiw	r28, 0x07	; 7
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <HLCD_voidShiftLeft>:
void HLCD_voidShiftLeft(void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	HLCD_stderrSendCommand(HLCD_SHIFT_LEFT);
    125e:	88 e1       	ldi	r24, 0x18	; 24
    1260:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_stderrSendCommand>
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <HLCD_voidWriteNumber>:
void HLCD_voidWriteNumber(u32 ARG_u32Number)
{
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	2f 97       	sbiw	r28, 0x0f	; 15
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	6c 87       	std	Y+12, r22	; 0x0c
    1284:	7d 87       	std	Y+13, r23	; 0x0d
    1286:	8e 87       	std	Y+14, r24	; 0x0e
    1288:	9f 87       	std	Y+15, r25	; 0x0f
	u8 ArrayToDisplay[10] ;
	s8 L_s8Counter = 0 ;
    128a:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u32Number == 0)
    128c:	8c 85       	ldd	r24, Y+12	; 0x0c
    128e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1290:	ae 85       	ldd	r26, Y+14	; 0x0e
    1292:	bf 85       	ldd	r27, Y+15	; 0x0f
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	a1 05       	cpc	r26, r1
    1298:	b1 05       	cpc	r27, r1
    129a:	99 f5       	brne	.+102    	; 0x1302 <HLCD_voidWriteNumber+0x98>
	{
		HLCD_stderrSendData('0');
    129c:	80 e3       	ldi	r24, 0x30	; 48
    129e:	0e 94 40 06 	call	0xc80	; 0xc80 <HLCD_stderrSendData>
    12a2:	4f c0       	rjmp	.+158    	; 0x1342 <HLCD_voidWriteNumber+0xd8>
	{


		while(ARG_u32Number!=0)
		{
			ArrayToDisplay[L_s8Counter] =ARG_u32Number%10;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	08 2f       	mov	r16, r24
    12a8:	11 27       	eor	r17, r17
    12aa:	07 fd       	sbrc	r16, 7
    12ac:	10 95       	com	r17
    12ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b2:	ae 85       	ldd	r26, Y+14	; 0x0e
    12b4:	bf 85       	ldd	r27, Y+15	; 0x0f
    12b6:	2a e0       	ldi	r18, 0x0A	; 10
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__udivmodsi4>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	28 2f       	mov	r18, r24
    12cc:	ce 01       	movw	r24, r28
    12ce:	02 96       	adiw	r24, 0x02	; 2
    12d0:	fc 01       	movw	r30, r24
    12d2:	e0 0f       	add	r30, r16
    12d4:	f1 1f       	adc	r31, r17
    12d6:	20 83       	st	Z, r18
			ARG_u32Number/=10;
    12d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12da:	9d 85       	ldd	r25, Y+13	; 0x0d
    12dc:	ae 85       	ldd	r26, Y+14	; 0x0e
    12de:	bf 85       	ldd	r27, Y+15	; 0x0f
    12e0:	2a e0       	ldi	r18, 0x0A	; 10
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__udivmodsi4>
    12f0:	da 01       	movw	r26, r20
    12f2:	c9 01       	movw	r24, r18
    12f4:	8c 87       	std	Y+12, r24	; 0x0c
    12f6:	9d 87       	std	Y+13, r25	; 0x0d
    12f8:	ae 87       	std	Y+14, r26	; 0x0e
    12fa:	bf 87       	std	Y+15, r27	; 0x0f
			L_s8Counter++;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{


		while(ARG_u32Number!=0)
    1302:	8c 85       	ldd	r24, Y+12	; 0x0c
    1304:	9d 85       	ldd	r25, Y+13	; 0x0d
    1306:	ae 85       	ldd	r26, Y+14	; 0x0e
    1308:	bf 85       	ldd	r27, Y+15	; 0x0f
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	a1 05       	cpc	r26, r1
    130e:	b1 05       	cpc	r27, r1
    1310:	49 f6       	brne	.-110    	; 0x12a4 <HLCD_voidWriteNumber+0x3a>
		{
			ArrayToDisplay[L_s8Counter] =ARG_u32Number%10;
			ARG_u32Number/=10;
			L_s8Counter++;
		}
		L_s8Counter--;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	81 50       	subi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	11 c0       	rjmp	.+34     	; 0x133c <HLCD_voidWriteNumber+0xd2>
		while(L_s8Counter>=0)
		{
			HLCD_stderrSendData(ArrayToDisplay[L_s8Counter]+'0');
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	33 27       	eor	r19, r19
    1320:	27 fd       	sbrc	r18, 7
    1322:	30 95       	com	r19
    1324:	ce 01       	movw	r24, r28
    1326:	02 96       	adiw	r24, 0x02	; 2
    1328:	fc 01       	movw	r30, r24
    132a:	e2 0f       	add	r30, r18
    132c:	f3 1f       	adc	r31, r19
    132e:	80 81       	ld	r24, Z
    1330:	80 5d       	subi	r24, 0xD0	; 208
    1332:	0e 94 40 06 	call	0xc80	; 0xc80 <HLCD_stderrSendData>
			L_s8Counter--;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	81 50       	subi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
			ArrayToDisplay[L_s8Counter] =ARG_u32Number%10;
			ARG_u32Number/=10;
			L_s8Counter++;
		}
		L_s8Counter--;
		while(L_s8Counter>=0)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	88 23       	and	r24, r24
    1340:	64 f7       	brge	.-40     	; 0x131a <HLCD_voidWriteNumber+0xb0>
		{
			HLCD_stderrSendData(ArrayToDisplay[L_s8Counter]+'0');
			L_s8Counter--;
		}
	}
}
    1342:	2f 96       	adiw	r28, 0x0f	; 15
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	08 95       	ret

00001358 <MDIO_stderrSetPortDirection>:
#include "MDIO_Interface.h"
#include "MDIO_Private.h"
#include "MDIO_Config.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <MDIO_stderrSetPortDirection+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <MDIO_stderrSetPortDirection+0x8>
    1360:	0f 92       	push	r0
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrStatus = E_OK ;
    136a:	19 82       	std	Y+1, r1	; 0x01
	if (ARG_u8Port <= MDIO_PORTD)
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	b0 f5       	brcc	.+108    	; 0x13de <MDIO_stderrSetPortDirection+0x86>
	{
		switch(ARG_u8Port)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3d 83       	std	Y+5, r19	; 0x05
    137a:	2c 83       	std	Y+4, r18	; 0x04
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	d1 f0       	breq	.+52     	; 0x13ba <MDIO_stderrSetPortDirection+0x62>
    1386:	2c 81       	ldd	r18, Y+4	; 0x04
    1388:	3d 81       	ldd	r19, Y+5	; 0x05
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <MDIO_stderrSetPortDirection+0x42>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	61 f0       	breq	.+24     	; 0x13b0 <MDIO_stderrSetPortDirection+0x58>
    1398:	1f c0       	rjmp	.+62     	; 0x13d8 <MDIO_stderrSetPortDirection+0x80>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <MDIO_stderrSetPortDirection+0x6c>
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <MDIO_stderrSetPortDirection+0x76>
    13ae:	14 c0       	rjmp	.+40     	; 0x13d8 <MDIO_stderrSetPortDirection+0x80>
		{
			case MDIO_PORTA : DDRA =  ARG_u8Direction ;break ;
    13b0:	ea e3       	ldi	r30, 0x3A	; 58
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	80 83       	st	Z, r24
    13b8:	14 c0       	rjmp	.+40     	; 0x13e2 <MDIO_stderrSetPortDirection+0x8a>
			case MDIO_PORTB : DDRB =  ARG_u8Direction ;break ;
    13ba:	e7 e3       	ldi	r30, 0x37	; 55
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	80 83       	st	Z, r24
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <MDIO_stderrSetPortDirection+0x8a>
			case MDIO_PORTC : DDRC =  ARG_u8Direction ;break ;
    13c4:	e4 e3       	ldi	r30, 0x34	; 52
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	80 83       	st	Z, r24
    13cc:	0a c0       	rjmp	.+20     	; 0x13e2 <MDIO_stderrSetPortDirection+0x8a>
			case MDIO_PORTD : DDRD =  ARG_u8Direction ;break ;
    13ce:	e1 e3       	ldi	r30, 0x31	; 49
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	80 83       	st	Z, r24
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <MDIO_stderrSetPortDirection+0x8a>
			default : L_stderrStatus = E_NOK ;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <MDIO_stderrSetPortDirection+0x8a>
		}
	}
	else 
	{
		L_stderrStatus = E_NOK ;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrStatus;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <MDIO_stderrSetPortValue>:
STD_error_t MDIO_stderrSetPortValue	  (u8 ARG_u8Port,  u8 ARG_u8PortValue)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <MDIO_stderrSetPortValue+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <MDIO_stderrSetPortValue+0x8>
    13fc:	0f 92       	push	r0
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrStatus = E_OK ;
    1406:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Port<=MDIO_PORTD )
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	98 f5       	brcc	.+102    	; 0x1474 <MDIO_stderrSetPortValue+0x80>
	{
		switch(ARG_u8Port)
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3d 83       	std	Y+5, r19	; 0x05
    1416:	2c 83       	std	Y+4, r18	; 0x04
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	9d 81       	ldd	r25, Y+5	; 0x05
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	d1 f0       	breq	.+52     	; 0x1456 <MDIO_stderrSetPortValue+0x62>
    1422:	2c 81       	ldd	r18, Y+4	; 0x04
    1424:	3d 81       	ldd	r19, Y+5	; 0x05
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	2c f4       	brge	.+10     	; 0x1436 <MDIO_stderrSetPortValue+0x42>
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	9d 81       	ldd	r25, Y+5	; 0x05
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	61 f0       	breq	.+24     	; 0x144c <MDIO_stderrSetPortValue+0x58>
    1434:	21 c0       	rjmp	.+66     	; 0x1478 <MDIO_stderrSetPortValue+0x84>
    1436:	2c 81       	ldd	r18, Y+4	; 0x04
    1438:	3d 81       	ldd	r19, Y+5	; 0x05
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	81 f0       	breq	.+32     	; 0x1460 <MDIO_stderrSetPortValue+0x6c>
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	81 f0       	breq	.+32     	; 0x146a <MDIO_stderrSetPortValue+0x76>
    144a:	16 c0       	rjmp	.+44     	; 0x1478 <MDIO_stderrSetPortValue+0x84>
		{
		case MDIO_PORTA : PORTA =  ARG_u8PortValue ; break  ;
    144c:	eb e3       	ldi	r30, 0x3B	; 59
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	80 83       	st	Z, r24
    1454:	11 c0       	rjmp	.+34     	; 0x1478 <MDIO_stderrSetPortValue+0x84>
		case MDIO_PORTB : PORTB =  ARG_u8PortValue ; break  ;
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	80 83       	st	Z, r24
    145e:	0c c0       	rjmp	.+24     	; 0x1478 <MDIO_stderrSetPortValue+0x84>
		case MDIO_PORTC : PORTC =  ARG_u8PortValue ; break  ;
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	80 83       	st	Z, r24
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <MDIO_stderrSetPortValue+0x84>
		case MDIO_PORTD : PORTD =  ARG_u8PortValue ; break  ;
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	80 83       	st	Z, r24
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <MDIO_stderrSetPortValue+0x84>
		}
	}
	else 
	{
		L_stderrStatus = E_NOK ;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrStatus;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <MDIO_stderrGetPortValue>:
STD_error_t MDIO_stderrGetPortValue	  (u8 ARG_u8Port,  u8 *ARG_u8PortValue)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <MDIO_stderrGetPortValue+0x6>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <MDIO_stderrGetPortValue+0x8>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <MDIO_stderrGetPortValue+0xa>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	7c 83       	std	Y+4, r23	; 0x04
    149c:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrStatus = E_OK ;
    149e:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Port <= MDIO_PORTD)
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	d8 f5       	brcc	.+118    	; 0x151c <MDIO_stderrGetPortValue+0x92>
	{
		switch(ARG_u8Port)
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3e 83       	std	Y+6, r19	; 0x06
    14ae:	2d 83       	std	Y+5, r18	; 0x05
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	e1 f0       	breq	.+56     	; 0x14f2 <MDIO_stderrGetPortValue+0x68>
    14ba:	2d 81       	ldd	r18, Y+5	; 0x05
    14bc:	3e 81       	ldd	r19, Y+6	; 0x06
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	2c f4       	brge	.+10     	; 0x14ce <MDIO_stderrGetPortValue+0x44>
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <MDIO_stderrGetPortValue+0x5a>
    14cc:	29 c0       	rjmp	.+82     	; 0x1520 <MDIO_stderrGetPortValue+0x96>
    14ce:	2d 81       	ldd	r18, Y+5	; 0x05
    14d0:	3e 81       	ldd	r19, Y+6	; 0x06
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	a1 f0       	breq	.+40     	; 0x1500 <MDIO_stderrGetPortValue+0x76>
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	b1 f0       	breq	.+44     	; 0x150e <MDIO_stderrGetPortValue+0x84>
    14e2:	1e c0       	rjmp	.+60     	; 0x1520 <MDIO_stderrGetPortValue+0x96>
		{
			case MDIO_PORTA: *ARG_u8PortValue = PINA ; break ;
    14e4:	e9 e3       	ldi	r30, 0x39	; 57
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	eb 81       	ldd	r30, Y+3	; 0x03
    14ec:	fc 81       	ldd	r31, Y+4	; 0x04
    14ee:	80 83       	st	Z, r24
    14f0:	17 c0       	rjmp	.+46     	; 0x1520 <MDIO_stderrGetPortValue+0x96>
			case MDIO_PORTB: *ARG_u8PortValue = PINB ; break ;
    14f2:	e6 e3       	ldi	r30, 0x36	; 54
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	eb 81       	ldd	r30, Y+3	; 0x03
    14fa:	fc 81       	ldd	r31, Y+4	; 0x04
    14fc:	80 83       	st	Z, r24
    14fe:	10 c0       	rjmp	.+32     	; 0x1520 <MDIO_stderrGetPortValue+0x96>
			case MDIO_PORTC: *ARG_u8PortValue = PINC ; break ;
    1500:	e3 e3       	ldi	r30, 0x33	; 51
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	eb 81       	ldd	r30, Y+3	; 0x03
    1508:	fc 81       	ldd	r31, Y+4	; 0x04
    150a:	80 83       	st	Z, r24
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <MDIO_stderrGetPortValue+0x96>
			case MDIO_PORTD: *ARG_u8PortValue = PIND ; break ; 
    150e:	e0 e3       	ldi	r30, 0x30	; 48
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	eb 81       	ldd	r30, Y+3	; 0x03
    1516:	fc 81       	ldd	r31, Y+4	; 0x04
    1518:	80 83       	st	Z, r24
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <MDIO_stderrGetPortValue+0x96>
		}
	}
	else 
	{
		L_stderrStatus =E_NOK ;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrStatus;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
}
    1522:	26 96       	adiw	r28, 0x06	; 6
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <MDIO_stderrTogglePort>:
STD_error_t MDIO_stderrTogglePort	  (u8 ARG_u8Port)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <MDIO_stderrTogglePort+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <MDIO_stderrTogglePort+0x8>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrStatus = E_OK ;
    1542:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Port<=MDIO_PORTD)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	08 f0       	brcs	.+2      	; 0x154c <MDIO_stderrTogglePort+0x18>
    154a:	29 c1       	rjmp	.+594    	; 0x179e <MDIO_stderrTogglePort+0x26a>
	{
		switch(ARG_u8Port)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <MDIO_stderrTogglePort+0x2e>
    1560:	58 c0       	rjmp	.+176    	; 0x1612 <MDIO_stderrTogglePort+0xde>
    1562:	2b 81       	ldd	r18, Y+3	; 0x03
    1564:	3c 81       	ldd	r19, Y+4	; 0x04
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	2c f4       	brge	.+10     	; 0x1576 <MDIO_stderrTogglePort+0x42>
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	71 f0       	breq	.+28     	; 0x1590 <MDIO_stderrTogglePort+0x5c>
    1574:	11 c1       	rjmp	.+546    	; 0x1798 <MDIO_stderrTogglePort+0x264>
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	09 f4       	brne	.+2      	; 0x1582 <MDIO_stderrTogglePort+0x4e>
    1580:	89 c0       	rjmp	.+274    	; 0x1694 <MDIO_stderrTogglePort+0x160>
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	91 05       	cpc	r25, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <MDIO_stderrTogglePort+0x5a>
    158c:	c4 c0       	rjmp	.+392    	; 0x1716 <MDIO_stderrTogglePort+0x1e2>
    158e:	04 c1       	rjmp	.+520    	; 0x1798 <MDIO_stderrTogglePort+0x264>
		{
			case MDIO_PORTA: 
				TOGGLE_BIT(PORTA,MDIO_PIN0) ;
    1590:	ab e3       	ldi	r26, 0x3B	; 59
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	eb e3       	ldi	r30, 0x3B	; 59
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	90 81       	ld	r25, Z
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 27       	eor	r24, r25
    159e:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,MDIO_PIN1) ;
    15a0:	ab e3       	ldi	r26, 0x3B	; 59
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	eb e3       	ldi	r30, 0x3B	; 59
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	90 81       	ld	r25, Z
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	89 27       	eor	r24, r25
    15ae:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,MDIO_PIN2) ;
    15b0:	ab e3       	ldi	r26, 0x3B	; 59
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	eb e3       	ldi	r30, 0x3B	; 59
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	90 81       	ld	r25, Z
    15ba:	84 e0       	ldi	r24, 0x04	; 4
    15bc:	89 27       	eor	r24, r25
    15be:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,MDIO_PIN3) ;
    15c0:	ab e3       	ldi	r26, 0x3B	; 59
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	eb e3       	ldi	r30, 0x3B	; 59
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	90 81       	ld	r25, Z
    15ca:	88 e0       	ldi	r24, 0x08	; 8
    15cc:	89 27       	eor	r24, r25
    15ce:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,MDIO_PIN4) ;
    15d0:	ab e3       	ldi	r26, 0x3B	; 59
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e3       	ldi	r30, 0x3B	; 59
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	90 81       	ld	r25, Z
    15da:	80 e1       	ldi	r24, 0x10	; 16
    15dc:	89 27       	eor	r24, r25
    15de:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,MDIO_PIN5) ;
    15e0:	ab e3       	ldi	r26, 0x3B	; 59
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	90 81       	ld	r25, Z
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	89 27       	eor	r24, r25
    15ee:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,MDIO_PIN6) ;
    15f0:	ab e3       	ldi	r26, 0x3B	; 59
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	eb e3       	ldi	r30, 0x3B	; 59
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	90 81       	ld	r25, Z
    15fa:	80 e4       	ldi	r24, 0x40	; 64
    15fc:	89 27       	eor	r24, r25
    15fe:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,MDIO_PIN7) ;
    1600:	ab e3       	ldi	r26, 0x3B	; 59
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	eb e3       	ldi	r30, 0x3B	; 59
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	90 81       	ld	r25, Z
    160a:	80 e8       	ldi	r24, 0x80	; 128
    160c:	89 27       	eor	r24, r25
    160e:	8c 93       	st	X, r24
    1610:	c8 c0       	rjmp	.+400    	; 0x17a2 <MDIO_stderrTogglePort+0x26e>
				break ; 
			case MDIO_PORTB:  
				TOGGLE_BIT(PORTB,MDIO_PIN0) ;
    1612:	a8 e3       	ldi	r26, 0x38	; 56
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e8 e3       	ldi	r30, 0x38	; 56
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	89 27       	eor	r24, r25
    1620:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTB,MDIO_PIN1) ;
    1622:	a8 e3       	ldi	r26, 0x38	; 56
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e8 e3       	ldi	r30, 0x38	; 56
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	90 81       	ld	r25, Z
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	89 27       	eor	r24, r25
    1630:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTB,MDIO_PIN2) ;
    1632:	a8 e3       	ldi	r26, 0x38	; 56
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e8 e3       	ldi	r30, 0x38	; 56
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	90 81       	ld	r25, Z
    163c:	84 e0       	ldi	r24, 0x04	; 4
    163e:	89 27       	eor	r24, r25
    1640:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTB,MDIO_PIN3) ;
    1642:	a8 e3       	ldi	r26, 0x38	; 56
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e8 e3       	ldi	r30, 0x38	; 56
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	90 81       	ld	r25, Z
    164c:	88 e0       	ldi	r24, 0x08	; 8
    164e:	89 27       	eor	r24, r25
    1650:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTB,MDIO_PIN4) ;
    1652:	a8 e3       	ldi	r26, 0x38	; 56
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e8 e3       	ldi	r30, 0x38	; 56
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	90 81       	ld	r25, Z
    165c:	80 e1       	ldi	r24, 0x10	; 16
    165e:	89 27       	eor	r24, r25
    1660:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTB,MDIO_PIN5) ;
    1662:	a8 e3       	ldi	r26, 0x38	; 56
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e8 e3       	ldi	r30, 0x38	; 56
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	90 81       	ld	r25, Z
    166c:	80 e2       	ldi	r24, 0x20	; 32
    166e:	89 27       	eor	r24, r25
    1670:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTB,MDIO_PIN6) ;
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	90 81       	ld	r25, Z
    167c:	80 e4       	ldi	r24, 0x40	; 64
    167e:	89 27       	eor	r24, r25
    1680:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTB,MDIO_PIN7) ;
    1682:	a8 e3       	ldi	r26, 0x38	; 56
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	90 81       	ld	r25, Z
    168c:	80 e8       	ldi	r24, 0x80	; 128
    168e:	89 27       	eor	r24, r25
    1690:	8c 93       	st	X, r24
    1692:	87 c0       	rjmp	.+270    	; 0x17a2 <MDIO_stderrTogglePort+0x26e>
				break ; 
			case MDIO_PORTC:  
				TOGGLE_BIT(PORTC,MDIO_PIN0) ;
    1694:	a5 e3       	ldi	r26, 0x35	; 53
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e3       	ldi	r30, 0x35	; 53
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	90 81       	ld	r25, Z
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	89 27       	eor	r24, r25
    16a2:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTC,MDIO_PIN1) ;
    16a4:	a5 e3       	ldi	r26, 0x35	; 53
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e3       	ldi	r30, 0x35	; 53
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	90 81       	ld	r25, Z
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	89 27       	eor	r24, r25
    16b2:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTC,MDIO_PIN2) ;
    16b4:	a5 e3       	ldi	r26, 0x35	; 53
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e3       	ldi	r30, 0x35	; 53
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	90 81       	ld	r25, Z
    16be:	84 e0       	ldi	r24, 0x04	; 4
    16c0:	89 27       	eor	r24, r25
    16c2:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTC,MDIO_PIN3) ;
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	90 81       	ld	r25, Z
    16ce:	88 e0       	ldi	r24, 0x08	; 8
    16d0:	89 27       	eor	r24, r25
    16d2:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTC,MDIO_PIN4) ;
    16d4:	a5 e3       	ldi	r26, 0x35	; 53
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e5 e3       	ldi	r30, 0x35	; 53
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	90 81       	ld	r25, Z
    16de:	80 e1       	ldi	r24, 0x10	; 16
    16e0:	89 27       	eor	r24, r25
    16e2:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTC,MDIO_PIN5) ;
    16e4:	a5 e3       	ldi	r26, 0x35	; 53
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e3       	ldi	r30, 0x35	; 53
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	90 81       	ld	r25, Z
    16ee:	80 e2       	ldi	r24, 0x20	; 32
    16f0:	89 27       	eor	r24, r25
    16f2:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTC,MDIO_PIN6) ;
    16f4:	a5 e3       	ldi	r26, 0x35	; 53
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e3       	ldi	r30, 0x35	; 53
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	90 81       	ld	r25, Z
    16fe:	80 e4       	ldi	r24, 0x40	; 64
    1700:	89 27       	eor	r24, r25
    1702:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTC,MDIO_PIN7) ;
    1704:	a5 e3       	ldi	r26, 0x35	; 53
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e3       	ldi	r30, 0x35	; 53
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	90 81       	ld	r25, Z
    170e:	80 e8       	ldi	r24, 0x80	; 128
    1710:	89 27       	eor	r24, r25
    1712:	8c 93       	st	X, r24
    1714:	46 c0       	rjmp	.+140    	; 0x17a2 <MDIO_stderrTogglePort+0x26e>
				break ; 
			case MDIO_PORTD:  
				TOGGLE_BIT(PORTD,MDIO_PIN0) ;
    1716:	a2 e3       	ldi	r26, 0x32	; 50
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	90 81       	ld	r25, Z
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	89 27       	eor	r24, r25
    1724:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTD,MDIO_PIN1) ;
    1726:	a2 e3       	ldi	r26, 0x32	; 50
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e2 e3       	ldi	r30, 0x32	; 50
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	90 81       	ld	r25, Z
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	89 27       	eor	r24, r25
    1734:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTD,MDIO_PIN2) ;
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	90 81       	ld	r25, Z
    1740:	84 e0       	ldi	r24, 0x04	; 4
    1742:	89 27       	eor	r24, r25
    1744:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTD,MDIO_PIN3) ;
    1746:	a2 e3       	ldi	r26, 0x32	; 50
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e2 e3       	ldi	r30, 0x32	; 50
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	90 81       	ld	r25, Z
    1750:	88 e0       	ldi	r24, 0x08	; 8
    1752:	89 27       	eor	r24, r25
    1754:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTD,MDIO_PIN4) ;
    1756:	a2 e3       	ldi	r26, 0x32	; 50
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e2 e3       	ldi	r30, 0x32	; 50
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	90 81       	ld	r25, Z
    1760:	80 e1       	ldi	r24, 0x10	; 16
    1762:	89 27       	eor	r24, r25
    1764:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTD,MDIO_PIN5) ;
    1766:	a2 e3       	ldi	r26, 0x32	; 50
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e2 e3       	ldi	r30, 0x32	; 50
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	90 81       	ld	r25, Z
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	89 27       	eor	r24, r25
    1774:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTD,MDIO_PIN6) ;
    1776:	a2 e3       	ldi	r26, 0x32	; 50
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e2 e3       	ldi	r30, 0x32	; 50
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	90 81       	ld	r25, Z
    1780:	80 e4       	ldi	r24, 0x40	; 64
    1782:	89 27       	eor	r24, r25
    1784:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTD,MDIO_PIN7) ;
    1786:	a2 e3       	ldi	r26, 0x32	; 50
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e2 e3       	ldi	r30, 0x32	; 50
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	90 81       	ld	r25, Z
    1790:	80 e8       	ldi	r24, 0x80	; 128
    1792:	89 27       	eor	r24, r25
    1794:	8c 93       	st	X, r24
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <MDIO_stderrTogglePort+0x26e>
				break ; 
			default :L_stderrStatus =E_NOK  ;	
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <MDIO_stderrTogglePort+0x26e>
		}
	}
	else 
	{
		L_stderrStatus =E_NOK ;		
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrStatus;
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
}	
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <MDIO_stderrSetPinDirection>:




STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <MDIO_stderrSetPinDirection+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <MDIO_stderrSetPinDirection+0x8>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <MDIO_stderrSetPinDirection+0xa>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	6b 83       	std	Y+3, r22	; 0x03
    17c4:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrStatus = E_OK ;
    17c6:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin<=MDIO_PIN7 && ((ARG_u8Direction == MDIO_PIN_INPUT)||(ARG_u8Direction == MDIO_PIN_OUTPUT)))
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	88 30       	cpi	r24, 0x08	; 8
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <MDIO_stderrSetPinDirection+0x1e>
    17ce:	dc c0       	rjmp	.+440    	; 0x1988 <MDIO_stderrSetPinDirection+0x1d6>
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	88 23       	and	r24, r24
    17d4:	21 f0       	breq	.+8      	; 0x17de <MDIO_stderrSetPinDirection+0x2c>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	09 f0       	breq	.+2      	; 0x17de <MDIO_stderrSetPinDirection+0x2c>
    17dc:	d5 c0       	rjmp	.+426    	; 0x1988 <MDIO_stderrSetPinDirection+0x1d6>
	{
		switch(ARG_u8Port)
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3e 83       	std	Y+6, r19	; 0x06
    17e6:	2d 83       	std	Y+5, r18	; 0x05
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	91 05       	cpc	r25, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <MDIO_stderrSetPinDirection+0x42>
    17f2:	43 c0       	rjmp	.+134    	; 0x187a <MDIO_stderrSetPinDirection+0xc8>
    17f4:	2d 81       	ldd	r18, Y+5	; 0x05
    17f6:	3e 81       	ldd	r19, Y+6	; 0x06
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	2c f4       	brge	.+10     	; 0x1808 <MDIO_stderrSetPinDirection+0x56>
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	71 f0       	breq	.+28     	; 0x1822 <MDIO_stderrSetPinDirection+0x70>
    1806:	bd c0       	rjmp	.+378    	; 0x1982 <MDIO_stderrSetPinDirection+0x1d0>
    1808:	2d 81       	ldd	r18, Y+5	; 0x05
    180a:	3e 81       	ldd	r19, Y+6	; 0x06
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	09 f4       	brne	.+2      	; 0x1814 <MDIO_stderrSetPinDirection+0x62>
    1812:	5f c0       	rjmp	.+190    	; 0x18d2 <MDIO_stderrSetPinDirection+0x120>
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <MDIO_stderrSetPinDirection+0x6e>
    181e:	85 c0       	rjmp	.+266    	; 0x192a <MDIO_stderrSetPinDirection+0x178>
    1820:	b0 c0       	rjmp	.+352    	; 0x1982 <MDIO_stderrSetPinDirection+0x1d0>
		{
			case MDIO_PORTA: 
				if(ARG_u8Direction == MDIO_PIN_OUTPUT)
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	a1 f4       	brne	.+40     	; 0x1850 <MDIO_stderrSetPinDirection+0x9e>
				{
					SET_BIT(DDRA,ARG_u8Pin);
    1828:	aa e3       	ldi	r26, 0x3A	; 58
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	ea e3       	ldi	r30, 0x3A	; 58
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <MDIO_stderrSetPinDirection+0x94>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <MDIO_stderrSetPinDirection+0x90>
    184a:	84 2b       	or	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	9e c0       	rjmp	.+316    	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
				}
				else 
				{
					CLEAR_BIT(DDRA,ARG_u8Pin);
    1850:	aa e3       	ldi	r26, 0x3A	; 58
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ea e3       	ldi	r30, 0x3A	; 58
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <MDIO_stderrSetPinDirection+0xbc>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <MDIO_stderrSetPinDirection+0xb8>
    1872:	80 95       	com	r24
    1874:	84 23       	and	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	89 c0       	rjmp	.+274    	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
				}
				break ; 
			case MDIO_PORTB: 
				if(ARG_u8Direction == MDIO_PIN_OUTPUT)
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <MDIO_stderrSetPinDirection+0xf6>
				{
					SET_BIT(DDRB,ARG_u8Pin);
    1880:	a7 e3       	ldi	r26, 0x37	; 55
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e7 e3       	ldi	r30, 0x37	; 55
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <MDIO_stderrSetPinDirection+0xec>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <MDIO_stderrSetPinDirection+0xe8>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	72 c0       	rjmp	.+228    	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
				}
				else 
				{
					CLEAR_BIT(DDRB,ARG_u8Pin);
    18a8:	a7 e3       	ldi	r26, 0x37	; 55
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e7 e3       	ldi	r30, 0x37	; 55
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <MDIO_stderrSetPinDirection+0x114>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <MDIO_stderrSetPinDirection+0x110>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	5d c0       	rjmp	.+186    	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
				}
				break ; 
			case MDIO_PORTC:
				if(ARG_u8Direction == MDIO_PIN_OUTPUT)
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	a1 f4       	brne	.+40     	; 0x1900 <MDIO_stderrSetPinDirection+0x14e>
				{
					SET_BIT(DDRC, ARG_u8Pin);
    18d8:	a4 e3       	ldi	r26, 0x34	; 52
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e4 e3       	ldi	r30, 0x34	; 52
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <MDIO_stderrSetPinDirection+0x144>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <MDIO_stderrSetPinDirection+0x140>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	46 c0       	rjmp	.+140    	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
				}
				else 
				{
					CLEAR_BIT(DDRC,ARG_u8Pin);
    1900:	a4 e3       	ldi	r26, 0x34	; 52
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e4 e3       	ldi	r30, 0x34	; 52
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <MDIO_stderrSetPinDirection+0x16c>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <MDIO_stderrSetPinDirection+0x168>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	31 c0       	rjmp	.+98     	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
				}
				break ; 			
			case MDIO_PORTD: 
				if(ARG_u8Direction == MDIO_PIN_OUTPUT)
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	a1 f4       	brne	.+40     	; 0x1958 <MDIO_stderrSetPinDirection+0x1a6>
				{
					SET_BIT(DDRD, ARG_u8Pin);
    1930:	a1 e3       	ldi	r26, 0x31	; 49
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e1 e3       	ldi	r30, 0x31	; 49
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <MDIO_stderrSetPinDirection+0x19c>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <MDIO_stderrSetPinDirection+0x198>
    1952:	84 2b       	or	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	1a c0       	rjmp	.+52     	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
				}
				else 
				{
					CLEAR_BIT(DDRD, ARG_u8Pin);
    1958:	a1 e3       	ldi	r26, 0x31	; 49
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e1 e3       	ldi	r30, 0x31	; 49
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <MDIO_stderrSetPinDirection+0x1c4>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <MDIO_stderrSetPinDirection+0x1c0>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	05 c0       	rjmp	.+10     	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
				}
				break ; 
			default : L_stderrStatus = E_NOK;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	02 c0       	rjmp	.+4      	; 0x198c <MDIO_stderrSetPinDirection+0x1da>
		}
	}
	else 
	{
		L_stderrStatus = E_NOK;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrStatus;
    198c:	89 81       	ldd	r24, Y+1	; 0x01
}
    198e:	26 96       	adiw	r28, 0x06	; 6
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <MDIO_stderrSetPinValue>:
STD_error_t MDIO_stderrSetPinValue	  (u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8PinValue)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <MDIO_stderrSetPinValue+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <MDIO_stderrSetPinValue+0x8>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <MDIO_stderrSetPinValue+0xa>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	6b 83       	std	Y+3, r22	; 0x03
    19b2:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrStatus = E_OK ;
    19b4:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin<=MDIO_PIN7 && ((ARG_u8PinValue == MDIO_PIN_LOW)||(ARG_u8PinValue == MDIO_PIN_HIGH)||(ARG_u8PinValue == MDIO_PIN_INPUT_PULLUP)))
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	88 30       	cpi	r24, 0x08	; 8
    19ba:	08 f0       	brcs	.+2      	; 0x19be <MDIO_stderrSetPinValue+0x1e>
    19bc:	e8 c0       	rjmp	.+464    	; 0x1b8e <MDIO_stderrSetPinValue+0x1ee>
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	88 23       	and	r24, r24
    19c2:	39 f0       	breq	.+14     	; 0x19d2 <MDIO_stderrSetPinValue+0x32>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <MDIO_stderrSetPinValue+0x32>
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <MDIO_stderrSetPinValue+0x32>
    19d0:	de c0       	rjmp	.+444    	; 0x1b8e <MDIO_stderrSetPinValue+0x1ee>
	{
		switch(ARG_u8Port)
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	3e 83       	std	Y+6, r19	; 0x06
    19da:	2d 83       	std	Y+5, r18	; 0x05
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	91 05       	cpc	r25, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <MDIO_stderrSetPinValue+0x48>
    19e6:	46 c0       	rjmp	.+140    	; 0x1a74 <MDIO_stderrSetPinValue+0xd4>
    19e8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ea:	3e 81       	ldd	r19, Y+6	; 0x06
    19ec:	22 30       	cpi	r18, 0x02	; 2
    19ee:	31 05       	cpc	r19, r1
    19f0:	2c f4       	brge	.+10     	; 0x19fc <MDIO_stderrSetPinValue+0x5c>
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	71 f0       	breq	.+28     	; 0x1a16 <MDIO_stderrSetPinValue+0x76>
    19fa:	cb c0       	rjmp	.+406    	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
    19fc:	2d 81       	ldd	r18, Y+5	; 0x05
    19fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <MDIO_stderrSetPinValue+0x68>
    1a06:	65 c0       	rjmp	.+202    	; 0x1ad2 <MDIO_stderrSetPinValue+0x132>
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	91 05       	cpc	r25, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <MDIO_stderrSetPinValue+0x74>
    1a12:	8e c0       	rjmp	.+284    	; 0x1b30 <MDIO_stderrSetPinValue+0x190>
    1a14:	be c0       	rjmp	.+380    	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
		{
			case MDIO_PORTA:
				if(ARG_u8PinValue == MDIO_PIN_HIGH || ARG_u8PinValue == MDIO_PIN_INPUT_PULLUP)
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <MDIO_stderrSetPinValue+0x82>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	a1 f4       	brne	.+40     	; 0x1a4a <MDIO_stderrSetPinValue+0xaa>
				{
					SET_BIT(PORTA, ARG_u8Pin);
    1a22:	ab e3       	ldi	r26, 0x3B	; 59
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	eb e3       	ldi	r30, 0x3B	; 59
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <MDIO_stderrSetPinValue+0xa0>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <MDIO_stderrSetPinValue+0x9c>
    1a44:	84 2b       	or	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	a4 c0       	rjmp	.+328    	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
				}
				else 
				{
					CLEAR_BIT(PORTA, ARG_u8Pin);
    1a4a:	ab e3       	ldi	r26, 0x3B	; 59
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	eb e3       	ldi	r30, 0x3B	; 59
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <MDIO_stderrSetPinValue+0xc8>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <MDIO_stderrSetPinValue+0xc4>
    1a6c:	80 95       	com	r24
    1a6e:	84 23       	and	r24, r20
    1a70:	8c 93       	st	X, r24
    1a72:	8f c0       	rjmp	.+286    	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
				
				}
				break ; 
			case MDIO_PORTB:
				if(ARG_u8PinValue == MDIO_PIN_HIGH || ARG_u8PinValue == MDIO_PIN_INPUT_PULLUP)
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	19 f0       	breq	.+6      	; 0x1a80 <MDIO_stderrSetPinValue+0xe0>
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	a1 f4       	brne	.+40     	; 0x1aa8 <MDIO_stderrSetPinValue+0x108>
				{
					SET_BIT(PORTB, ARG_u8Pin);
    1a80:	a8 e3       	ldi	r26, 0x38	; 56
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e8 e3       	ldi	r30, 0x38	; 56
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <MDIO_stderrSetPinValue+0xfe>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <MDIO_stderrSetPinValue+0xfa>
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	75 c0       	rjmp	.+234    	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
				}
				else 
				{
					CLEAR_BIT(PORTB, ARG_u8Pin);
    1aa8:	a8 e3       	ldi	r26, 0x38	; 56
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e8 e3       	ldi	r30, 0x38	; 56
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <MDIO_stderrSetPinValue+0x126>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <MDIO_stderrSetPinValue+0x122>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	60 c0       	rjmp	.+192    	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
				}
				break ; 
			case MDIO_PORTC: 
				if(ARG_u8PinValue == MDIO_PIN_HIGH || ARG_u8PinValue == MDIO_PIN_INPUT_PULLUP)
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <MDIO_stderrSetPinValue+0x13e>
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	a1 f4       	brne	.+40     	; 0x1b06 <MDIO_stderrSetPinValue+0x166>
				{
					SET_BIT(PORTC, ARG_u8Pin);
    1ade:	a5 e3       	ldi	r26, 0x35	; 53
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e3       	ldi	r30, 0x35	; 53
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <MDIO_stderrSetPinValue+0x15c>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <MDIO_stderrSetPinValue+0x158>
    1b00:	84 2b       	or	r24, r20
    1b02:	8c 93       	st	X, r24
    1b04:	46 c0       	rjmp	.+140    	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
				}
				else 
				{
					CLEAR_BIT(PORTC, ARG_u8Pin);
    1b06:	a5 e3       	ldi	r26, 0x35	; 53
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e5 e3       	ldi	r30, 0x35	; 53
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <MDIO_stderrSetPinValue+0x184>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <MDIO_stderrSetPinValue+0x180>
    1b28:	80 95       	com	r24
    1b2a:	84 23       	and	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	31 c0       	rjmp	.+98     	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
				}
				break ; 
			case MDIO_PORTD: 
				if(ARG_u8PinValue == MDIO_PIN_HIGH || ARG_u8PinValue == MDIO_PIN_INPUT_PULLUP)
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	19 f0       	breq	.+6      	; 0x1b3c <MDIO_stderrSetPinValue+0x19c>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	a1 f4       	brne	.+40     	; 0x1b64 <MDIO_stderrSetPinValue+0x1c4>
				{
					SET_BIT(PORTD, ARG_u8Pin);
    1b3c:	a2 e3       	ldi	r26, 0x32	; 50
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	48 2f       	mov	r20, r24
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 2e       	mov	r0, r18
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <MDIO_stderrSetPinValue+0x1ba>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	0a 94       	dec	r0
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <MDIO_stderrSetPinValue+0x1b6>
    1b5e:	84 2b       	or	r24, r20
    1b60:	8c 93       	st	X, r24
    1b62:	17 c0       	rjmp	.+46     	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
				}
				else 
				{
					CLEAR_BIT(PORTD, ARG_u8Pin);
    1b64:	a2 e3       	ldi	r26, 0x32	; 50
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e2 e3       	ldi	r30, 0x32	; 50
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	48 2f       	mov	r20, r24
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 2e       	mov	r0, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <MDIO_stderrSetPinValue+0x1e2>
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	0a 94       	dec	r0
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <MDIO_stderrSetPinValue+0x1de>
    1b86:	80 95       	com	r24
    1b88:	84 23       	and	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <MDIO_stderrSetPinValue+0x1f2>
			default : break ; 
		}
	}
	else 
	{
		L_stderrStatus = E_NOK ; 
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	return L_stderrStatus;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b94:	26 96       	adiw	r28, 0x06	; 6
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <MDIO_stderrGetPinValue>:
STD_error_t MDIO_stderrGetPinValue	  (u8 ARG_u8Port, u8 ARG_u8Pin, u8 *ARG_u8PinValue)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	27 97       	sbiw	r28, 0x07	; 7
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	8a 83       	std	Y+2, r24	; 0x02
    1bbc:	6b 83       	std	Y+3, r22	; 0x03
    1bbe:	5d 83       	std	Y+5, r21	; 0x05
    1bc0:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrStatus = E_OK ;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin<=MDIO_PIN7)
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	88 30       	cpi	r24, 0x08	; 8
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <MDIO_stderrGetPinValue+0x26>
    1bca:	74 c0       	rjmp	.+232    	; 0x1cb4 <MDIO_stderrGetPinValue+0x10e>
	{
		switch(ARG_u8Port)
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3f 83       	std	Y+7, r19	; 0x07
    1bd4:	2e 83       	std	Y+6, r18	; 0x06
    1bd6:	4e 81       	ldd	r20, Y+6	; 0x06
    1bd8:	5f 81       	ldd	r21, Y+7	; 0x07
    1bda:	41 30       	cpi	r20, 0x01	; 1
    1bdc:	51 05       	cpc	r21, r1
    1bde:	59 f1       	breq	.+86     	; 0x1c36 <MDIO_stderrGetPinValue+0x90>
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	82 30       	cpi	r24, 0x02	; 2
    1be6:	91 05       	cpc	r25, r1
    1be8:	34 f4       	brge	.+12     	; 0x1bf6 <MDIO_stderrGetPinValue+0x50>
    1bea:	2e 81       	ldd	r18, Y+6	; 0x06
    1bec:	3f 81       	ldd	r19, Y+7	; 0x07
    1bee:	21 15       	cp	r18, r1
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	69 f0       	breq	.+26     	; 0x1c0e <MDIO_stderrGetPinValue+0x68>
    1bf4:	5c c0       	rjmp	.+184    	; 0x1cae <MDIO_stderrGetPinValue+0x108>
    1bf6:	4e 81       	ldd	r20, Y+6	; 0x06
    1bf8:	5f 81       	ldd	r21, Y+7	; 0x07
    1bfa:	42 30       	cpi	r20, 0x02	; 2
    1bfc:	51 05       	cpc	r21, r1
    1bfe:	79 f1       	breq	.+94     	; 0x1c5e <MDIO_stderrGetPinValue+0xb8>
    1c00:	8e 81       	ldd	r24, Y+6	; 0x06
    1c02:	9f 81       	ldd	r25, Y+7	; 0x07
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	91 05       	cpc	r25, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <MDIO_stderrGetPinValue+0x66>
    1c0a:	3d c0       	rjmp	.+122    	; 0x1c86 <MDIO_stderrGetPinValue+0xe0>
    1c0c:	50 c0       	rjmp	.+160    	; 0x1cae <MDIO_stderrGetPinValue+0x108>
		{
			case MDIO_PORTA: *ARG_u8PinValue = GET_BIT(PINA,ARG_u8Pin); break ; 
    1c0e:	e9 e3       	ldi	r30, 0x39	; 57
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a9 01       	movw	r20, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <MDIO_stderrGetPinValue+0x80>
    1c22:	55 95       	asr	r21
    1c24:	47 95       	ror	r20
    1c26:	8a 95       	dec	r24
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <MDIO_stderrGetPinValue+0x7c>
    1c2a:	ca 01       	movw	r24, r20
    1c2c:	81 70       	andi	r24, 0x01	; 1
    1c2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c30:	fd 81       	ldd	r31, Y+5	; 0x05
    1c32:	80 83       	st	Z, r24
    1c34:	41 c0       	rjmp	.+130    	; 0x1cb8 <MDIO_stderrGetPinValue+0x112>
			case MDIO_PORTB: *ARG_u8PinValue = GET_BIT(PINB,ARG_u8Pin); break ; 
    1c36:	e6 e3       	ldi	r30, 0x36	; 54
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a9 01       	movw	r20, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <MDIO_stderrGetPinValue+0xa8>
    1c4a:	55 95       	asr	r21
    1c4c:	47 95       	ror	r20
    1c4e:	8a 95       	dec	r24
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <MDIO_stderrGetPinValue+0xa4>
    1c52:	ca 01       	movw	r24, r20
    1c54:	81 70       	andi	r24, 0x01	; 1
    1c56:	ec 81       	ldd	r30, Y+4	; 0x04
    1c58:	fd 81       	ldd	r31, Y+5	; 0x05
    1c5a:	80 83       	st	Z, r24
    1c5c:	2d c0       	rjmp	.+90     	; 0x1cb8 <MDIO_stderrGetPinValue+0x112>
			case MDIO_PORTC: *ARG_u8PinValue = GET_BIT(PINC,ARG_u8Pin); break ; 
    1c5e:	e3 e3       	ldi	r30, 0x33	; 51
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a9 01       	movw	r20, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <MDIO_stderrGetPinValue+0xd0>
    1c72:	55 95       	asr	r21
    1c74:	47 95       	ror	r20
    1c76:	8a 95       	dec	r24
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <MDIO_stderrGetPinValue+0xcc>
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	81 70       	andi	r24, 0x01	; 1
    1c7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c80:	fd 81       	ldd	r31, Y+5	; 0x05
    1c82:	80 83       	st	Z, r24
    1c84:	19 c0       	rjmp	.+50     	; 0x1cb8 <MDIO_stderrGetPinValue+0x112>
			case MDIO_PORTD: *ARG_u8PinValue = GET_BIT(PIND,ARG_u8Pin); break ; 
    1c86:	e0 e3       	ldi	r30, 0x30	; 48
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <MDIO_stderrGetPinValue+0xf8>
    1c9a:	55 95       	asr	r21
    1c9c:	47 95       	ror	r20
    1c9e:	8a 95       	dec	r24
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <MDIO_stderrGetPinValue+0xf4>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	81 70       	andi	r24, 0x01	; 1
    1ca6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ca8:	fd 81       	ldd	r31, Y+5	; 0x05
    1caa:	80 83       	st	Z, r24
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <MDIO_stderrGetPinValue+0x112>
			default : L_stderrStatus = E_NOK ; break ;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <MDIO_stderrGetPinValue+0x112>
		}
	}
	else 
	{
		L_stderrStatus = E_NOK ; 
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrStatus;
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cba:	27 96       	adiw	r28, 0x07	; 7
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <MDIO_stderrTogglePin>:
STD_error_t MDIO_stderrTogglePin	  (u8 ARG_u8Port, u8 ARG_u8Pin)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <MDIO_stderrTogglePin+0x6>
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <MDIO_stderrTogglePin+0x8>
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	8a 83       	std	Y+2, r24	; 0x02
    1cdc:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrStatus = E_OK ;
    1cde:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin<=MDIO_PIN7)
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	88 30       	cpi	r24, 0x08	; 8
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <MDIO_stderrTogglePin+0x1c>
    1ce6:	72 c0       	rjmp	.+228    	; 0x1dcc <MDIO_stderrTogglePin+0x100>
	{
		switch(ARG_u8Port)
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	3d 83       	std	Y+5, r19	; 0x05
    1cf0:	2c 83       	std	Y+4, r18	; 0x04
    1cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	49 f1       	breq	.+82     	; 0x1d4e <MDIO_stderrTogglePin+0x82>
    1cfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1d00:	22 30       	cpi	r18, 0x02	; 2
    1d02:	31 05       	cpc	r19, r1
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <MDIO_stderrTogglePin+0x44>
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	61 f0       	breq	.+24     	; 0x1d26 <MDIO_stderrTogglePin+0x5a>
    1d0e:	5b c0       	rjmp	.+182    	; 0x1dc6 <MDIO_stderrTogglePin+0xfa>
    1d10:	2c 81       	ldd	r18, Y+4	; 0x04
    1d12:	3d 81       	ldd	r19, Y+5	; 0x05
    1d14:	22 30       	cpi	r18, 0x02	; 2
    1d16:	31 05       	cpc	r19, r1
    1d18:	71 f1       	breq	.+92     	; 0x1d76 <MDIO_stderrTogglePin+0xaa>
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	91 05       	cpc	r25, r1
    1d22:	e9 f1       	breq	.+122    	; 0x1d9e <MDIO_stderrTogglePin+0xd2>
    1d24:	50 c0       	rjmp	.+160    	; 0x1dc6 <MDIO_stderrTogglePin+0xfa>
		{
			case MDIO_PORTA: TOGGLE_BIT(PORTA, ARG_u8Pin) ; break ;
    1d26:	ab e3       	ldi	r26, 0x3B	; 59
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	eb e3       	ldi	r30, 0x3B	; 59
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <MDIO_stderrTogglePin+0x78>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <MDIO_stderrTogglePin+0x74>
    1d48:	84 27       	eor	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	41 c0       	rjmp	.+130    	; 0x1dd0 <MDIO_stderrTogglePin+0x104>
			case MDIO_PORTB: TOGGLE_BIT(PORTB, ARG_u8Pin) ; break ;
    1d4e:	a8 e3       	ldi	r26, 0x38	; 56
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e8 e3       	ldi	r30, 0x38	; 56
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <MDIO_stderrTogglePin+0xa0>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <MDIO_stderrTogglePin+0x9c>
    1d70:	84 27       	eor	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	2d c0       	rjmp	.+90     	; 0x1dd0 <MDIO_stderrTogglePin+0x104>
			case MDIO_PORTC: TOGGLE_BIT(PORTC, ARG_u8Pin) ; break ;
    1d76:	a5 e3       	ldi	r26, 0x35	; 53
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e5 e3       	ldi	r30, 0x35	; 53
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <MDIO_stderrTogglePin+0xc8>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <MDIO_stderrTogglePin+0xc4>
    1d98:	84 27       	eor	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	19 c0       	rjmp	.+50     	; 0x1dd0 <MDIO_stderrTogglePin+0x104>
			case MDIO_PORTD: TOGGLE_BIT(PORTD, ARG_u8Pin) ; break ;
    1d9e:	a2 e3       	ldi	r26, 0x32	; 50
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e2 e3       	ldi	r30, 0x32	; 50
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <MDIO_stderrTogglePin+0xf0>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <MDIO_stderrTogglePin+0xec>
    1dc0:	84 27       	eor	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <MDIO_stderrTogglePin+0x104>
			default : L_stderrStatus = E_NOK ;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <MDIO_stderrTogglePin+0x104>
		}
	}
	else 
	{
		L_stderrStatus = E_NOK; 
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrStatus;
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <main>:
};



int main(void)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
//	MDIO_stderrSetPortDirection(MDIO_PORTD,MDIO_PORT_OUTPUT);
//	MDIO_stderrSetPortDirection(MDIO_PORTC,MDIO_PORT_OUTPUT);
	HLCD_voidInit();
    1dea:	0e 94 e5 06 	call	0xdca	; 0xdca <HLCD_voidInit>
	HLCD_voidDisplayString("Elamir Galal I am 24 years old I am an engineer");
    1dee:	80 e6       	ldi	r24, 0x60	; 96
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <HLCD_voidDisplayString>
    1df6:	ff cf       	rjmp	.-2      	; 0x1df6 <main+0x14>

00001df8 <__divmodhi4>:
    1df8:	97 fb       	bst	r25, 7
    1dfa:	09 2e       	mov	r0, r25
    1dfc:	07 26       	eor	r0, r23
    1dfe:	0a d0       	rcall	.+20     	; 0x1e14 <__divmodhi4_neg1>
    1e00:	77 fd       	sbrc	r23, 7
    1e02:	04 d0       	rcall	.+8      	; 0x1e0c <__divmodhi4_neg2>
    1e04:	2e d0       	rcall	.+92     	; 0x1e62 <__udivmodhi4>
    1e06:	06 d0       	rcall	.+12     	; 0x1e14 <__divmodhi4_neg1>
    1e08:	00 20       	and	r0, r0
    1e0a:	1a f4       	brpl	.+6      	; 0x1e12 <__divmodhi4_exit>

00001e0c <__divmodhi4_neg2>:
    1e0c:	70 95       	com	r23
    1e0e:	61 95       	neg	r22
    1e10:	7f 4f       	sbci	r23, 0xFF	; 255

00001e12 <__divmodhi4_exit>:
    1e12:	08 95       	ret

00001e14 <__divmodhi4_neg1>:
    1e14:	f6 f7       	brtc	.-4      	; 0x1e12 <__divmodhi4_exit>
    1e16:	90 95       	com	r25
    1e18:	81 95       	neg	r24
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	08 95       	ret

00001e1e <__udivmodsi4>:
    1e1e:	a1 e2       	ldi	r26, 0x21	; 33
    1e20:	1a 2e       	mov	r1, r26
    1e22:	aa 1b       	sub	r26, r26
    1e24:	bb 1b       	sub	r27, r27
    1e26:	fd 01       	movw	r30, r26
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <__udivmodsi4_ep>

00001e2a <__udivmodsi4_loop>:
    1e2a:	aa 1f       	adc	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	ee 1f       	adc	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	a2 17       	cp	r26, r18
    1e34:	b3 07       	cpc	r27, r19
    1e36:	e4 07       	cpc	r30, r20
    1e38:	f5 07       	cpc	r31, r21
    1e3a:	20 f0       	brcs	.+8      	; 0x1e44 <__udivmodsi4_ep>
    1e3c:	a2 1b       	sub	r26, r18
    1e3e:	b3 0b       	sbc	r27, r19
    1e40:	e4 0b       	sbc	r30, r20
    1e42:	f5 0b       	sbc	r31, r21

00001e44 <__udivmodsi4_ep>:
    1e44:	66 1f       	adc	r22, r22
    1e46:	77 1f       	adc	r23, r23
    1e48:	88 1f       	adc	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	1a 94       	dec	r1
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <__udivmodsi4_loop>
    1e50:	60 95       	com	r22
    1e52:	70 95       	com	r23
    1e54:	80 95       	com	r24
    1e56:	90 95       	com	r25
    1e58:	9b 01       	movw	r18, r22
    1e5a:	ac 01       	movw	r20, r24
    1e5c:	bd 01       	movw	r22, r26
    1e5e:	cf 01       	movw	r24, r30
    1e60:	08 95       	ret

00001e62 <__udivmodhi4>:
    1e62:	aa 1b       	sub	r26, r26
    1e64:	bb 1b       	sub	r27, r27
    1e66:	51 e1       	ldi	r21, 0x11	; 17
    1e68:	07 c0       	rjmp	.+14     	; 0x1e78 <__udivmodhi4_ep>

00001e6a <__udivmodhi4_loop>:
    1e6a:	aa 1f       	adc	r26, r26
    1e6c:	bb 1f       	adc	r27, r27
    1e6e:	a6 17       	cp	r26, r22
    1e70:	b7 07       	cpc	r27, r23
    1e72:	10 f0       	brcs	.+4      	; 0x1e78 <__udivmodhi4_ep>
    1e74:	a6 1b       	sub	r26, r22
    1e76:	b7 0b       	sbc	r27, r23

00001e78 <__udivmodhi4_ep>:
    1e78:	88 1f       	adc	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	5a 95       	dec	r21
    1e7e:	a9 f7       	brne	.-22     	; 0x1e6a <__udivmodhi4_loop>
    1e80:	80 95       	com	r24
    1e82:	90 95       	com	r25
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	08 95       	ret

00001e8a <__prologue_saves__>:
    1e8a:	2f 92       	push	r2
    1e8c:	3f 92       	push	r3
    1e8e:	4f 92       	push	r4
    1e90:	5f 92       	push	r5
    1e92:	6f 92       	push	r6
    1e94:	7f 92       	push	r7
    1e96:	8f 92       	push	r8
    1e98:	9f 92       	push	r9
    1e9a:	af 92       	push	r10
    1e9c:	bf 92       	push	r11
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	ca 1b       	sub	r28, r26
    1eb4:	db 0b       	sbc	r29, r27
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	09 94       	ijmp

00001ec2 <__epilogue_restores__>:
    1ec2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ec4:	39 88       	ldd	r3, Y+17	; 0x11
    1ec6:	48 88       	ldd	r4, Y+16	; 0x10
    1ec8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eca:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ecc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ece:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ed0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ed2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ed4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ed6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ed8:	df 80       	ldd	r13, Y+7	; 0x07
    1eda:	ee 80       	ldd	r14, Y+6	; 0x06
    1edc:	fd 80       	ldd	r15, Y+5	; 0x05
    1ede:	0c 81       	ldd	r16, Y+4	; 0x04
    1ee0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ee2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ee6:	ce 0f       	add	r28, r30
    1ee8:	d1 1d       	adc	r29, r1
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	ed 01       	movw	r28, r26
    1ef6:	08 95       	ret

00001ef8 <_exit>:
    1ef8:	f8 94       	cli

00001efa <__stop_program>:
    1efa:	ff cf       	rjmp	.-2      	; 0x1efa <__stop_program>
